// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/chickey/blog/internal/models"
)

// BlogsLister is an autogenerated mock type for the blogsLister type
type BlogsLister struct {
	mock.Mock
}

type BlogsLister_Expecter struct {
	mock *mock.Mock
}

func (_m *BlogsLister) EXPECT() *BlogsLister_Expecter {
	return &BlogsLister_Expecter{mock: &_m.Mock}
}

// ListBlogs provides a mock function with given fields: ctx, title
func (_m *BlogsLister) ListBlogs(ctx context.Context, title string) ([]models.Blog, error) {
	ret := _m.Called(ctx, title)

	if len(ret) == 0 {
		panic("no return value specified for ListBlogs")
	}

	var r0 []models.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]models.Blog, error)); ok {
		return rf(ctx, title)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []models.Blog); ok {
		r0 = rf(ctx, title)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Blog)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, title)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlogsLister_ListBlogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListBlogs'
type BlogsLister_ListBlogs_Call struct {
	*mock.Call
}

// ListBlogs is a helper method to define mock.On call
//   - ctx context.Context
//   - title string
func (_e *BlogsLister_Expecter) ListBlogs(ctx interface{}, title interface{}) *BlogsLister_ListBlogs_Call {
	return &BlogsLister_ListBlogs_Call{Call: _e.mock.On("ListBlogs", ctx, title)}
}

func (_c *BlogsLister_ListBlogs_Call) Run(run func(ctx context.Context, title string)) *BlogsLister_ListBlogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *BlogsLister_ListBlogs_Call) Return(_a0 []models.Blog, _a1 error) *BlogsLister_ListBlogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlogsLister_ListBlogs_Call) RunAndReturn(run func(context.Context, string) ([]models.Blog, error)) *BlogsLister_ListBlogs_Call {
	_c.Call.Return(run)
	return _c
}

// NewBlogsLister creates a new instance of BlogsLister. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogsLister(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogsLister {
	mock := &BlogsLister{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
