// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CommentDeleter is an autogenerated mock type for the commentDeleter type
type CommentDeleter struct {
	mock.Mock
}

type CommentDeleter_Expecter struct {
	mock *mock.Mock
}

func (_m *CommentDeleter) EXPECT() *CommentDeleter_Expecter {
	return &CommentDeleter_Expecter{mock: &_m.Mock}
}

// DeleteComment provides a mock function with given fields: ctx, user_id, blog_id
func (_m *CommentDeleter) DeleteComment(ctx context.Context, user_id uint, blog_id uint) error {
	ret := _m.Called(ctx, user_id, blog_id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteComment")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, uint) error); ok {
		r0 = rf(ctx, user_id, blog_id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommentDeleter_DeleteComment_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteComment'
type CommentDeleter_DeleteComment_Call struct {
	*mock.Call
}

// DeleteComment is a helper method to define mock.On call
//   - ctx context.Context
//   - user_id uint
//   - blog_id uint
func (_e *CommentDeleter_Expecter) DeleteComment(ctx interface{}, user_id interface{}, blog_id interface{}) *CommentDeleter_DeleteComment_Call {
	return &CommentDeleter_DeleteComment_Call{Call: _e.mock.On("DeleteComment", ctx, user_id, blog_id)}
}

func (_c *CommentDeleter_DeleteComment_Call) Run(run func(ctx context.Context, user_id uint, blog_id uint)) *CommentDeleter_DeleteComment_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint), args[2].(uint))
	})
	return _c
}

func (_c *CommentDeleter_DeleteComment_Call) Return(_a0 error) *CommentDeleter_DeleteComment_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *CommentDeleter_DeleteComment_Call) RunAndReturn(run func(context.Context, uint, uint) error) *CommentDeleter_DeleteComment_Call {
	_c.Call.Return(run)
	return _c
}

// NewCommentDeleter creates a new instance of CommentDeleter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCommentDeleter(t interface {
	mock.TestingT
	Cleanup(func())
}) *CommentDeleter {
	mock := &CommentDeleter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
