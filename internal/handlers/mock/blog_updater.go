// Code generated by mockery v2.51.1. DO NOT EDIT.

package mock

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/chickey/blog/internal/models"
)

// BlogUpdater is an autogenerated mock type for the blogUpdater type
type BlogUpdater struct {
	mock.Mock
}

type BlogUpdater_Expecter struct {
	mock *mock.Mock
}

func (_m *BlogUpdater) EXPECT() *BlogUpdater_Expecter {
	return &BlogUpdater_Expecter{mock: &_m.Mock}
}

// UpdateBlog provides a mock function with given fields: ctx, id, patch
func (_m *BlogUpdater) UpdateBlog(ctx context.Context, id uint64, patch models.Blog) (models.Blog, error) {
	ret := _m.Called(ctx, id, patch)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBlog")
	}

	var r0 models.Blog
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uint64, models.Blog) (models.Blog, error)); ok {
		return rf(ctx, id, patch)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uint64, models.Blog) models.Blog); ok {
		r0 = rf(ctx, id, patch)
	} else {
		r0 = ret.Get(0).(models.Blog)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uint64, models.Blog) error); ok {
		r1 = rf(ctx, id, patch)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BlogUpdater_UpdateBlog_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBlog'
type BlogUpdater_UpdateBlog_Call struct {
	*mock.Call
}

// UpdateBlog is a helper method to define mock.On call
//   - ctx context.Context
//   - id uint64
//   - patch models.Blog
func (_e *BlogUpdater_Expecter) UpdateBlog(ctx interface{}, id interface{}, patch interface{}) *BlogUpdater_UpdateBlog_Call {
	return &BlogUpdater_UpdateBlog_Call{Call: _e.mock.On("UpdateBlog", ctx, id, patch)}
}

func (_c *BlogUpdater_UpdateBlog_Call) Run(run func(ctx context.Context, id uint64, patch models.Blog)) *BlogUpdater_UpdateBlog_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint64), args[2].(models.Blog))
	})
	return _c
}

func (_c *BlogUpdater_UpdateBlog_Call) Return(_a0 models.Blog, _a1 error) *BlogUpdater_UpdateBlog_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *BlogUpdater_UpdateBlog_Call) RunAndReturn(run func(context.Context, uint64, models.Blog) (models.Blog, error)) *BlogUpdater_UpdateBlog_Call {
	_c.Call.Return(run)
	return _c
}

// NewBlogUpdater creates a new instance of BlogUpdater. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBlogUpdater(t interface {
	mock.TestingT
	Cleanup(func())
}) *BlogUpdater {
	mock := &BlogUpdater{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
